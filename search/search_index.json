{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenu\u00b7e\u00b7s dans la documentation des codeur\u00b7euses du LXP \u00b6 Ce site en construction a pour vocation de centraliser les informations n\u00e9cessaires aux travaux informatiques du Lyc\u00e9e Exp\u00e9rimental de Saint-Nazaire.","title":"Accueil"},{"location":"#bienvenues-dans-la-documentation-des-codeureuses-du-lxp","text":"Ce site en construction a pour vocation de centraliser les informations n\u00e9cessaires aux travaux informatiques du Lyc\u00e9e Exp\u00e9rimental de Saint-Nazaire.","title":"Bienvenu\u00b7e\u00b7s dans la documentation des codeur\u00b7euses du LXP"},{"location":"djangolxp/Utilisation-github_pycharm/","text":"Utilisation de Github avec Pycharm \u00b6 Github est le site le plus utilis\u00e9 pour la gestion des versions (historique des modifications du code) avec l'outil Git . Bien que rachet\u00e9 r\u00e9cemment par Microsoft, nous allons donc apprendre \u00e0 l'utiliser (d'autres services bas\u00e9s sur git existent : Gitlab, bitbucket...). L'objectif de cette page wiki n'est pas de remplacer la documentation de l'outil Git ou de Github , mais de voir comment utiliser Github avec notre IDE PyCharm pour centraliser les modifications apport\u00e9es au projet. Workflow \u00b6 Nous allons essayer de travailler comme le font d\u00e9sormais la majorit\u00e9 DevOps pour une int\u00e9gration continue : avec un d\u00e9veloppement bas\u00e9 sur le tronc (trunk based development). Plus de d\u00e9tail ici . En effet, pour avoir un code qui \u00e9volue rapidement par les contributions simultan\u00e9es de plusieurs d\u00e9veloppeurs, nous aurons les 2 objectifs suivants : - Conserver une version du code bien test\u00e9e et fonctionnelle en production (branche main aka le tronc) - Cr\u00e9er des branches \u00e9ph\u00e9m\u00e8res \u00e0 chaque fois qu'on souhaite impl\u00e9menter une nouvelle fonctionalit\u00e9. Une fois que nos quelques petites modifications de branche sont test\u00e9es (pas de grosses r\u00e9volutions du code, on y va par petites touches...) on pourra alors proc\u00e9der \u00e0 un Pull Request , c'est dire tenter une fusion de notre branche \u00e9ph\u00e9m\u00e8re \u00e0 la branche main . Voir un exemple ici : https://github.com/Lycee-Experimental/django-lxp/pull/2 Cr\u00e9er une nouvelle branche avec Pycharm \u00b6 Commencer par mettre votre branche main \u00e0 jour des derni\u00e8res modifs depuis github avec un git pull obtenu via le raccourci en haut \u00e0 gauche de pycharm : Cliquer ensuite sur l'ic\u00f4ne suivant en bas \u00e0 droite de la fen\u00eatre de PyCharm : Puis sur + New Branch pour cr\u00e9er une nouvelle branche dont PyCharm vous demande ensuite le nom. : Modification de nos fichiers sources \u00b6 Effectuez alors des modifs dans les fichiers du code, par exemple models.py et forms.py pour ajouter des champs et les afficher dans le formulaire . Tester les changements en local \u00b6 Avant de valider nos changements et les pousser (push) sur Github, tester localement notre application : Enregistrement des modifications dans notre nouvelle branche \u00b6 La commande git commit permet d'enregistrer les changements, on y acc\u00e8de ici avec PyCharm : Une fen\u00eatre s'ouvre \u00e0 gauche pour indiquer les fichiers \u00e0 int\u00e9grer \u00e0 notre enregistrement (commit), et le commentaire \u00e0 associer \u00e0 ce changement, puis COMMIT pour les enregistrer localement, ou COMMIT AND PUSH pour envoyer directement sur github : Un test automatique de l'application est alors effectu\u00e9 par Github Actions. S'il est valide, on obtient ceci : Bascule des changements dans main . \u00b6 Aller dans le menu Git du haut, puis Github , puis Create Pull Request . Renseigner le titre et la description de votre requ\u00e8te de fusion de votre branche avec main On pourra alors discuter sur Github de la pertinence de cette fusion, et y apporter d'\u00e9ventuelles modifications avant de la valider. Un test de la pull request sera r\u00e9alis\u00e9 par Github Actions , qui s'il est valide, sera d\u00e9ploy\u00e9 automatiquement par Heroku \u00e0 une adresse de la forme : https://django-lxp-pr-3.herokuapp.com Une fois la Pull Request valid\u00e9e par notre \u00e9quipe, notre nouvelle main sera accessible \u00e0 l'adresse : https://main.inscription.cf , pr\u00eate \u00e0 passer en production \u00e0 l'adresse : https://inscription.cf Vous pouvez ensuite effacer votre nouvelle branche dans le menu en bas \u00e0 droite.","title":"Utilisation de Github"},{"location":"djangolxp/Utilisation-github_pycharm/#utilisation-de-github-avec-pycharm","text":"Github est le site le plus utilis\u00e9 pour la gestion des versions (historique des modifications du code) avec l'outil Git . Bien que rachet\u00e9 r\u00e9cemment par Microsoft, nous allons donc apprendre \u00e0 l'utiliser (d'autres services bas\u00e9s sur git existent : Gitlab, bitbucket...). L'objectif de cette page wiki n'est pas de remplacer la documentation de l'outil Git ou de Github , mais de voir comment utiliser Github avec notre IDE PyCharm pour centraliser les modifications apport\u00e9es au projet.","title":"Utilisation de Github avec Pycharm"},{"location":"djangolxp/Utilisation-github_pycharm/#workflow","text":"Nous allons essayer de travailler comme le font d\u00e9sormais la majorit\u00e9 DevOps pour une int\u00e9gration continue : avec un d\u00e9veloppement bas\u00e9 sur le tronc (trunk based development). Plus de d\u00e9tail ici . En effet, pour avoir un code qui \u00e9volue rapidement par les contributions simultan\u00e9es de plusieurs d\u00e9veloppeurs, nous aurons les 2 objectifs suivants : - Conserver une version du code bien test\u00e9e et fonctionnelle en production (branche main aka le tronc) - Cr\u00e9er des branches \u00e9ph\u00e9m\u00e8res \u00e0 chaque fois qu'on souhaite impl\u00e9menter une nouvelle fonctionalit\u00e9. Une fois que nos quelques petites modifications de branche sont test\u00e9es (pas de grosses r\u00e9volutions du code, on y va par petites touches...) on pourra alors proc\u00e9der \u00e0 un Pull Request , c'est dire tenter une fusion de notre branche \u00e9ph\u00e9m\u00e8re \u00e0 la branche main . Voir un exemple ici : https://github.com/Lycee-Experimental/django-lxp/pull/2","title":"Workflow"},{"location":"djangolxp/Utilisation-github_pycharm/#creer-une-nouvelle-branche-avec-pycharm","text":"Commencer par mettre votre branche main \u00e0 jour des derni\u00e8res modifs depuis github avec un git pull obtenu via le raccourci en haut \u00e0 gauche de pycharm : Cliquer ensuite sur l'ic\u00f4ne suivant en bas \u00e0 droite de la fen\u00eatre de PyCharm : Puis sur + New Branch pour cr\u00e9er une nouvelle branche dont PyCharm vous demande ensuite le nom. :","title":"Cr\u00e9er une nouvelle branche avec Pycharm"},{"location":"djangolxp/Utilisation-github_pycharm/#modification-de-nos-fichiers-sources","text":"Effectuez alors des modifs dans les fichiers du code, par exemple models.py et forms.py pour ajouter des champs et les afficher dans le formulaire .","title":"Modification de nos fichiers sources"},{"location":"djangolxp/Utilisation-github_pycharm/#tester-les-changements-en-local","text":"Avant de valider nos changements et les pousser (push) sur Github, tester localement notre application :","title":"Tester les changements en local"},{"location":"djangolxp/Utilisation-github_pycharm/#enregistrement-des-modifications-dans-notre-nouvelle-branche","text":"La commande git commit permet d'enregistrer les changements, on y acc\u00e8de ici avec PyCharm : Une fen\u00eatre s'ouvre \u00e0 gauche pour indiquer les fichiers \u00e0 int\u00e9grer \u00e0 notre enregistrement (commit), et le commentaire \u00e0 associer \u00e0 ce changement, puis COMMIT pour les enregistrer localement, ou COMMIT AND PUSH pour envoyer directement sur github : Un test automatique de l'application est alors effectu\u00e9 par Github Actions. S'il est valide, on obtient ceci :","title":"Enregistrement des modifications dans notre nouvelle branche"},{"location":"djangolxp/Utilisation-github_pycharm/#bascule-des-changements-dans-main","text":"Aller dans le menu Git du haut, puis Github , puis Create Pull Request . Renseigner le titre et la description de votre requ\u00e8te de fusion de votre branche avec main On pourra alors discuter sur Github de la pertinence de cette fusion, et y apporter d'\u00e9ventuelles modifications avant de la valider. Un test de la pull request sera r\u00e9alis\u00e9 par Github Actions , qui s'il est valide, sera d\u00e9ploy\u00e9 automatiquement par Heroku \u00e0 une adresse de la forme : https://django-lxp-pr-3.herokuapp.com Une fois la Pull Request valid\u00e9e par notre \u00e9quipe, notre nouvelle main sera accessible \u00e0 l'adresse : https://main.inscription.cf , pr\u00eate \u00e0 passer en production \u00e0 l'adresse : https://inscription.cf Vous pouvez ensuite effacer votre nouvelle branche dans le menu en bas \u00e0 droite.","title":"Bascule des changements dans main."},{"location":"djangolxp/ajout-champs/","text":"Ajout de champs avec Django \u00b6 Cr\u00e9ation de champs dans la base : models.py \u00b6 Les champs de la base \u00e9l\u00e8ves sont \u00e0 d\u00e9finir dans le fichier models.py qui correspond \u00e0 la gestion des bases de donn\u00e9es. Exemple : phone = models . CharField ( max_length = 255 , blank = True , null = True , verbose_name = \"T\u00e9l\u00e9phone\" ) * phone est le nom du champ. * CharField signifie que c'est une chaine de caract\u00e8res (on pourrait plut\u00f4t impl\u00e9menter un contr\u00f4le du nombre de chiffres...). * verbose_name est son nom complet que l'on pourra utiliser pour l'affichage dans les formulaires. * blank=True, null=True permet d'indiquer que ce champ n'est pas n\u00e9cessaire \u00e0 renseigner pour ajouter un \u00e9l\u00e8ve dans la base. L'enjeux ici est donc de d\u00e9terminer les champs \u00e0 ajouter, s'ils sont indispensables ou pas \u00e0 la saisie, et de quel type ils sont. Pour d\u00e9terminer les champs \u00e0 cr\u00e9er, se baser sur ceux des fiches d'inscription du LXP, et des bases SIECLE et CYCLADES Pour en savoir plus sur les types de champs, voir la doc de django . Affichage du champ dans un formulaire : forms.py \u00b6 Pour pouvoir faire des saisies d'\u00e9l\u00e8ves et ainsi tester notre appli, il faut \u00e9galement faire en sorte que ces champs (et surto\u00fbt les champs n\u00e9cessaires), soient affich\u00e9s dans les formulaires. Cela se passe dans le fichier forms.py . Il existe diff\u00e9rents formulaires qui correspondent aux \u00e9tapes de la saisie : class InscriptionForm1 ( forms . ModelForm ): Dans le formulaire de votre choix, les nouveaux champs cr\u00e9\u00e9s pr\u00e9c\u00e9dement dans models.py doivent \u00eatre renseign\u00e9s \u00e0 2 niveaux : 1. Pour la mise en forme du formulaire dans la partie Layout : self . helper . layout = Layout ( 'civility' , 'last_name' , 'first_name' , 'birth_date' , 'birth_place' , 'birth_country' , 'address' , 'photo' , ) Pour en savoir plus sur la mise en forme des champs et changer leur apparence, voir la doc de la librairie Crispy . Pour lier ce champs \u00e0 notre mod\u00e8le de Base El\u00e8ve class Meta : # Mod\u00e8le utilis\u00e9 et entr\u00e9es \u00e0 renseigner model = BaseEleve fields = [ 'address' , 'civility' , 'last_name' , 'first_name' , 'birth_date' , 'birth_place' , 'birth_country' , 'photo' ,] Ajouter une \u00e9tape au formulaire : views.py \u00b6 Si vous souhaitez rajouter une \u00e9tape \u00e0 la saisie, cr\u00e9er un nouveau formulaire dans forms.py, par exemple class InscriptionForm4 ( forms . ModelForm ): name = 'Ma nouvelle \u00e9tape' def __init__ ( self , * args , ** kwargs ): \"\"\" Surcharge de l'initialisation du formulaire \"\"\" super () . __init__ ( * args , ** kwargs ) # FormHelper pour customiser ton formulaire self . helper = FormHelper () # Id et la classe bootstrap de ton formulaire self . helper . form_class = 'form-horizontal' self . helper . form_id = 'BaseEleve-form' # Largeur des labels et des champs sur la grille self . helper . label_class = 'col-md-4' self . helper . field_class = 'col-md-8' # Affichage de ton formulaire self . helper . layout = Layout ( # Liste des champs \u00e0 afficher 'mon_nouveau_champ' , ) class Meta : # Mod\u00e8le utilis\u00e9 et entr\u00e9es \u00e0 renseigner model = BaseEleve fields = [ 'mon_nouveau_champ' , ] Importer votre nouveaux formulaire dans le fichier views.py from .forms import InscriptionForm1 , InscriptionForm2 , InscriptionForm3 , ListeEleveForm , InscriptionForm4 Et l'ajouter \u00e0 la liste utilis\u00e9e par notre formulaire d'inscription : form_list = [ InscriptionForm1 , InscriptionForm2 , InscriptionForm3 , InscriptionForm4 ,]","title":"Ajout de champs au formulaires"},{"location":"djangolxp/ajout-champs/#ajout-de-champs-avec-django","text":"","title":"Ajout de champs avec Django"},{"location":"djangolxp/ajout-champs/#creation-de-champs-dans-la-base-modelspy","text":"Les champs de la base \u00e9l\u00e8ves sont \u00e0 d\u00e9finir dans le fichier models.py qui correspond \u00e0 la gestion des bases de donn\u00e9es. Exemple : phone = models . CharField ( max_length = 255 , blank = True , null = True , verbose_name = \"T\u00e9l\u00e9phone\" ) * phone est le nom du champ. * CharField signifie que c'est une chaine de caract\u00e8res (on pourrait plut\u00f4t impl\u00e9menter un contr\u00f4le du nombre de chiffres...). * verbose_name est son nom complet que l'on pourra utiliser pour l'affichage dans les formulaires. * blank=True, null=True permet d'indiquer que ce champ n'est pas n\u00e9cessaire \u00e0 renseigner pour ajouter un \u00e9l\u00e8ve dans la base. L'enjeux ici est donc de d\u00e9terminer les champs \u00e0 ajouter, s'ils sont indispensables ou pas \u00e0 la saisie, et de quel type ils sont. Pour d\u00e9terminer les champs \u00e0 cr\u00e9er, se baser sur ceux des fiches d'inscription du LXP, et des bases SIECLE et CYCLADES Pour en savoir plus sur les types de champs, voir la doc de django .","title":"Cr\u00e9ation de champs dans la base : models.py"},{"location":"djangolxp/ajout-champs/#affichage-du-champ-dans-un-formulaire-formspy","text":"Pour pouvoir faire des saisies d'\u00e9l\u00e8ves et ainsi tester notre appli, il faut \u00e9galement faire en sorte que ces champs (et surto\u00fbt les champs n\u00e9cessaires), soient affich\u00e9s dans les formulaires. Cela se passe dans le fichier forms.py . Il existe diff\u00e9rents formulaires qui correspondent aux \u00e9tapes de la saisie : class InscriptionForm1 ( forms . ModelForm ): Dans le formulaire de votre choix, les nouveaux champs cr\u00e9\u00e9s pr\u00e9c\u00e9dement dans models.py doivent \u00eatre renseign\u00e9s \u00e0 2 niveaux : 1. Pour la mise en forme du formulaire dans la partie Layout : self . helper . layout = Layout ( 'civility' , 'last_name' , 'first_name' , 'birth_date' , 'birth_place' , 'birth_country' , 'address' , 'photo' , ) Pour en savoir plus sur la mise en forme des champs et changer leur apparence, voir la doc de la librairie Crispy . Pour lier ce champs \u00e0 notre mod\u00e8le de Base El\u00e8ve class Meta : # Mod\u00e8le utilis\u00e9 et entr\u00e9es \u00e0 renseigner model = BaseEleve fields = [ 'address' , 'civility' , 'last_name' , 'first_name' , 'birth_date' , 'birth_place' , 'birth_country' , 'photo' ,]","title":"Affichage du champ dans un formulaire : forms.py"},{"location":"djangolxp/ajout-champs/#ajouter-une-etape-au-formulaire-viewspy","text":"Si vous souhaitez rajouter une \u00e9tape \u00e0 la saisie, cr\u00e9er un nouveau formulaire dans forms.py, par exemple class InscriptionForm4 ( forms . ModelForm ): name = 'Ma nouvelle \u00e9tape' def __init__ ( self , * args , ** kwargs ): \"\"\" Surcharge de l'initialisation du formulaire \"\"\" super () . __init__ ( * args , ** kwargs ) # FormHelper pour customiser ton formulaire self . helper = FormHelper () # Id et la classe bootstrap de ton formulaire self . helper . form_class = 'form-horizontal' self . helper . form_id = 'BaseEleve-form' # Largeur des labels et des champs sur la grille self . helper . label_class = 'col-md-4' self . helper . field_class = 'col-md-8' # Affichage de ton formulaire self . helper . layout = Layout ( # Liste des champs \u00e0 afficher 'mon_nouveau_champ' , ) class Meta : # Mod\u00e8le utilis\u00e9 et entr\u00e9es \u00e0 renseigner model = BaseEleve fields = [ 'mon_nouveau_champ' , ] Importer votre nouveaux formulaire dans le fichier views.py from .forms import InscriptionForm1 , InscriptionForm2 , InscriptionForm3 , ListeEleveForm , InscriptionForm4 Et l'ajouter \u00e0 la liste utilis\u00e9e par notre formulaire d'inscription : form_list = [ InscriptionForm1 , InscriptionForm2 , InscriptionForm3 , InscriptionForm4 ,]","title":"Ajouter une \u00e9tape au formulaire : views.py"},{"location":"djangolxp/deploiement-local/","text":"D\u00e9veloppement du projet avec Pycharm \u00b6 Installation de Pycharm \u00b6 Commencer par installer Pycharm Installation des d\u00e9pendances \u00b6 Installer les d\u00e9pendances n\u00e9cessaires au projet. Dans un terminal : sudo apt install gdal-bin libpq-dev git python3.8-dev python3-distutils libmysqlclient-dev # Installation de Poetry curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python3 Pour info git est le gestionnaire de version que nous utilisons via Github Voir ici . gdal-bin est une librairie dont d\u00e9pend l'affichage des cartes g\u00e9ographiques par django-leaflet . libpq-dev est n\u00e9cessaire \u00e0 l'installation de psycopg, la librairie python pour se connecter \u00e0 une base PostgreSQL python3.8-dev est sont librairies de d\u00e9velopement de python3.8. libmysqlclient-dev est une librairie dont d\u00e9pend mysqlclient pour se connecter \u00e0 notre base mariadb python3-distutils est requis pour le bon fonctionnement de Poetry Poetry est un outil qui permet de mettre en place un environnement virtuel et installer les d\u00e9pendances Configuration de Github dans Pycharm \u00b6 Cr\u00e9ation d'un compte Github \u00b6 Si vous n'en avez pas encore cr\u00e9\u00e9 un, rendez-vous sur cette page . Indiquer le nom de codeur\u00b7euse que vous souhaitez. Int\u00e9gration de l'Organisation Lyc\u00e9e Exp\u00e9rimental \u00b6 Pour avoir le droit d'apporter des modifications au code de django-lxp, il vous faut appartenir \u00e0 l'organisation \"Lyc\u00e9e Exp\u00e9rimental\". Pour cela demander \u00e0 l'un de ses membres de vous y inviter en lui indiquant le nom de votre nom de codeur\u00b7euse. Vous devriez ensuite recevoir un email pour accepter l'invitation, ou alors rendez-vous simplement sur la page de l'organisation pour accepter l'invit. Configurer Pycharm avec votre identifiant Github \u00b6 Aller dans le menu File / Settings Puis dans Version control / Github / + / Log via Github Votre navigateur devrait s'ouvrir pour que vous puissiez accepter que Pycharm soit associ\u00e9 \u00e0 votre compte Github. T\u00e9l\u00e9charement du code source du projet \u00b6 Rendez-vous dans le menu git / clone . Indiquez l'url de notre d\u00e9p\u00f4t ( https://github.com/Lycee-Experimental/django-lxp ), ainsi que le r\u00e9pertoire dans lequel vous souhaitez le t\u00e9l\u00e9charger, puis cliquez sur Clone . Configuration de l'environnement virtuel \u00b6 Une fois le code source t\u00e9l\u00e9charg\u00e9 depuis notre d\u00e9pot distant Github, Pycharm va d\u00e9tecter le fichier pyproject.toml et donc vous proposer de mettre en place l'environnement virtuel avec Poetry. Cliquer sur OK . Patienter pendant que Poetry install l'ensemble des paquets n\u00e9cessaires G\u00e9n\u00e9ration du fichier .env contenant nos cl\u00e9s secr\u00e8tes, et des donn\u00e9es initiales \u00b6 Certaines cl\u00e9s ne doivent pas \u00eatre publi\u00e9es sur Github car sont personnelles (service AWS, google map...). On va donc les g\u00e9n\u00e9rer \u00e0 partir d'un fichier encrypt\u00e9 encrypted.data . On t\u00e9l\u00e9charge ensuite les donn\u00e9es initiales sous forme de json qui sont aussi encrypt\u00e9es. Ouvrir un terminal en cliquant en bas \u00e0 gauche : Y copier la commande suivante ( CTR+SHIFT+V pour coller dans le terminal) : openssl enc -d -aes-256-cbc -in encrypted.data -out .env export $( cat .env | xargs ) mkdir data curl \"https://gist.githubusercontent.com/davy39/c382e6a01e0b15a3be883bbfd4863627/raw/c875f335cc2b2d8f58adf9c6ff3545184f609afd/secured.tar.gz\" | openssl enc -d -aes256 -pbkdf2 -pass pass: $SECRET_KEY | tar xz -C data Info Demander le mot de passe \u00e0 un membre de l'\u00e9quipe de d\u00e9veloppement du LXP... G\u00e9n\u00e9ration de la base de donn\u00e9e pour Django \u00b6 Pour commencer \u00e0 utiliser localement notre application, il faut g\u00e9n\u00e9rer la base de donn\u00e9e. Pour cela, 2 possibilit\u00e9s : Soit entrer la commande suivante dans le terminal : python manage.py migrate Soit ouvrir l'onglet manage.py \u00e0 partir du menu Tools ou CTL+ALT+R : Puis tapper simplement la commande migrate Cr\u00e9ation d'un superutilisateur \u00b6 Pour pouvoir acc\u00e9der \u00e0 l'interface d'administration de notre appli, il faut pr\u00e9alablement cr\u00e9er un superutilisateur. Toujours dans l'onglet manage.py ( CTL+ALT+R) , entrer la commande createsuperuser puis renseigner un nom, email et mot de passe. Lancement du serveur Django \u00b6 Il suffit ensuite de lancer l'application : L'application est alors accessible \u00e0 l'adresse : https://127.0.0.1","title":"D\u00e9ploiement Django-lxp"},{"location":"djangolxp/deploiement-local/#developpement-du-projet-avec-pycharm","text":"","title":"D\u00e9veloppement du projet avec Pycharm"},{"location":"djangolxp/deploiement-local/#installation-de-pycharm","text":"Commencer par installer Pycharm","title":"Installation de Pycharm"},{"location":"djangolxp/deploiement-local/#installation-des-dependances","text":"Installer les d\u00e9pendances n\u00e9cessaires au projet. Dans un terminal : sudo apt install gdal-bin libpq-dev git python3.8-dev python3-distutils libmysqlclient-dev # Installation de Poetry curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python3 Pour info git est le gestionnaire de version que nous utilisons via Github Voir ici . gdal-bin est une librairie dont d\u00e9pend l'affichage des cartes g\u00e9ographiques par django-leaflet . libpq-dev est n\u00e9cessaire \u00e0 l'installation de psycopg, la librairie python pour se connecter \u00e0 une base PostgreSQL python3.8-dev est sont librairies de d\u00e9velopement de python3.8. libmysqlclient-dev est une librairie dont d\u00e9pend mysqlclient pour se connecter \u00e0 notre base mariadb python3-distutils est requis pour le bon fonctionnement de Poetry Poetry est un outil qui permet de mettre en place un environnement virtuel et installer les d\u00e9pendances","title":"Installation des d\u00e9pendances"},{"location":"djangolxp/deploiement-local/#configuration-de-github-dans-pycharm","text":"","title":"Configuration de Github dans Pycharm"},{"location":"djangolxp/deploiement-local/#creation-dun-compte-github","text":"Si vous n'en avez pas encore cr\u00e9\u00e9 un, rendez-vous sur cette page . Indiquer le nom de codeur\u00b7euse que vous souhaitez.","title":"Cr\u00e9ation d'un compte Github"},{"location":"djangolxp/deploiement-local/#integration-de-lorganisation-lycee-experimental","text":"Pour avoir le droit d'apporter des modifications au code de django-lxp, il vous faut appartenir \u00e0 l'organisation \"Lyc\u00e9e Exp\u00e9rimental\". Pour cela demander \u00e0 l'un de ses membres de vous y inviter en lui indiquant le nom de votre nom de codeur\u00b7euse. Vous devriez ensuite recevoir un email pour accepter l'invitation, ou alors rendez-vous simplement sur la page de l'organisation pour accepter l'invit.","title":"Int\u00e9gration de l'Organisation Lyc\u00e9e Exp\u00e9rimental"},{"location":"djangolxp/deploiement-local/#configurer-pycharm-avec-votre-identifiant-github","text":"Aller dans le menu File / Settings Puis dans Version control / Github / + / Log via Github Votre navigateur devrait s'ouvrir pour que vous puissiez accepter que Pycharm soit associ\u00e9 \u00e0 votre compte Github.","title":"Configurer Pycharm avec votre identifiant Github"},{"location":"djangolxp/deploiement-local/#telecharement-du-code-source-du-projet","text":"Rendez-vous dans le menu git / clone . Indiquez l'url de notre d\u00e9p\u00f4t ( https://github.com/Lycee-Experimental/django-lxp ), ainsi que le r\u00e9pertoire dans lequel vous souhaitez le t\u00e9l\u00e9charger, puis cliquez sur Clone .","title":"T\u00e9l\u00e9charement du code source du projet"},{"location":"djangolxp/deploiement-local/#configuration-de-lenvironnement-virtuel","text":"Une fois le code source t\u00e9l\u00e9charg\u00e9 depuis notre d\u00e9pot distant Github, Pycharm va d\u00e9tecter le fichier pyproject.toml et donc vous proposer de mettre en place l'environnement virtuel avec Poetry. Cliquer sur OK . Patienter pendant que Poetry install l'ensemble des paquets n\u00e9cessaires","title":"Configuration de l'environnement virtuel"},{"location":"djangolxp/deploiement-local/#generation-du-fichier-env-contenant-nos-cles-secretes-et-des-donnees-initiales","text":"Certaines cl\u00e9s ne doivent pas \u00eatre publi\u00e9es sur Github car sont personnelles (service AWS, google map...). On va donc les g\u00e9n\u00e9rer \u00e0 partir d'un fichier encrypt\u00e9 encrypted.data . On t\u00e9l\u00e9charge ensuite les donn\u00e9es initiales sous forme de json qui sont aussi encrypt\u00e9es. Ouvrir un terminal en cliquant en bas \u00e0 gauche : Y copier la commande suivante ( CTR+SHIFT+V pour coller dans le terminal) : openssl enc -d -aes-256-cbc -in encrypted.data -out .env export $( cat .env | xargs ) mkdir data curl \"https://gist.githubusercontent.com/davy39/c382e6a01e0b15a3be883bbfd4863627/raw/c875f335cc2b2d8f58adf9c6ff3545184f609afd/secured.tar.gz\" | openssl enc -d -aes256 -pbkdf2 -pass pass: $SECRET_KEY | tar xz -C data Info Demander le mot de passe \u00e0 un membre de l'\u00e9quipe de d\u00e9veloppement du LXP...","title":"G\u00e9n\u00e9ration du fichier .env contenant nos cl\u00e9s secr\u00e8tes, et des donn\u00e9es initiales"},{"location":"djangolxp/deploiement-local/#generation-de-la-base-de-donnee-pour-django","text":"Pour commencer \u00e0 utiliser localement notre application, il faut g\u00e9n\u00e9rer la base de donn\u00e9e. Pour cela, 2 possibilit\u00e9s : Soit entrer la commande suivante dans le terminal : python manage.py migrate Soit ouvrir l'onglet manage.py \u00e0 partir du menu Tools ou CTL+ALT+R : Puis tapper simplement la commande migrate","title":"G\u00e9n\u00e9ration de la base de donn\u00e9e pour Django"},{"location":"djangolxp/deploiement-local/#creation-dun-superutilisateur","text":"Pour pouvoir acc\u00e9der \u00e0 l'interface d'administration de notre appli, il faut pr\u00e9alablement cr\u00e9er un superutilisateur. Toujours dans l'onglet manage.py ( CTL+ALT+R) , entrer la commande createsuperuser puis renseigner un nom, email et mot de passe.","title":"Cr\u00e9ation d'un superutilisateur"},{"location":"djangolxp/deploiement-local/#lancement-du-serveur-django","text":"Il suffit ensuite de lancer l'application : L'application est alors accessible \u00e0 l'adresse : https://127.0.0.1","title":"Lancement du serveur Django"},{"location":"djangolxp/install-pycharm/","text":"Pour travailler sur notre projet, on utilise l'environnement de d\u00e9veloppement (Integrated Development Environment) Pycharm. Ce logiciel d\u00e9di\u00e9 au d\u00e9veloppement python est gratuit dans sa version communautaire , mais payant pour avoir acc\u00e8s \u00e0 des fonctionnalit\u00e9s suppl\u00e9mentaires, notamment pour le d\u00e9veloppement Web. Pour installer et activer la license pro en attendant de l'acqu\u00e9rir : Installation de Pycharm \u00b6 # On t\u00e9l\u00e9charge la version pro de l'IDE sudo wget -c https://download-cdn.jetbrains.com/python/pycharm-professional-2021.3.2.tar.gz -O - | sudo tar -xz -C /opt/ # Son patch d'activation sudo wget -c https://github.com/Lycee-Experimental/django-lxp/raw/main/extra/ja-netfilter-all.tar.gz -O - | sudo tar -xz -C /opt/pycharm-2021.3.2 # on indique \u00e0 l'IDE o\u00f9 trouver le patch echo \"-javaagent:/opt/pycharm-2021.3.2/ja-netfilter-all/ja-netfilter.jar\" | sudo tee -a /opt/pycharm-2021.3.2/bin/pycharm64.vmoptions # Enfin, on cr\u00e9e un \u00e9l\u00e9ment de menu pour lancer notre IDE plus facilement cat <<EOT > ~/.local/share/applications/pycharm.desktop [Desktop Entry] Name=PyCharm Exec=/opt/pycharm-2021.3.2/bin/pycharm.sh Comment=Programmation python Terminal=false Categories=Development; Icon=/opt/pycharm-2021.3.2/bin/pycharm.svg Type=Application EOT # On charge l'\u00e9l\u00e9ment de menu ainsi cr\u00e9\u00e9 sudo update-desktop-database ~/.local/share/applications Un petit red\u00e9marrage (ou simplement d\u00e9connection/reconnection), PyCharm est maintenant pr\u00eat \u00e0 \u00eatre utilis\u00e9 depuis le menu ! Au premier lancement, vous tomberez sur la page d'activation de Pycharm. Il vous faudra s\u00e9lectionner le mode d'essai ( Start trial ) puis vous connecter sur Jetbrains, par exemple avec vos identifiants Github . Note Si vous n'en avez pas encore cr\u00e9\u00e9 un, rendez-vous sur cette page . Indiquer le nom de codeur\u00b7euse que vous souhaitez.","title":"Installation de Pycharm"},{"location":"djangolxp/install-pycharm/#installation-de-pycharm","text":"# On t\u00e9l\u00e9charge la version pro de l'IDE sudo wget -c https://download-cdn.jetbrains.com/python/pycharm-professional-2021.3.2.tar.gz -O - | sudo tar -xz -C /opt/ # Son patch d'activation sudo wget -c https://github.com/Lycee-Experimental/django-lxp/raw/main/extra/ja-netfilter-all.tar.gz -O - | sudo tar -xz -C /opt/pycharm-2021.3.2 # on indique \u00e0 l'IDE o\u00f9 trouver le patch echo \"-javaagent:/opt/pycharm-2021.3.2/ja-netfilter-all/ja-netfilter.jar\" | sudo tee -a /opt/pycharm-2021.3.2/bin/pycharm64.vmoptions # Enfin, on cr\u00e9e un \u00e9l\u00e9ment de menu pour lancer notre IDE plus facilement cat <<EOT > ~/.local/share/applications/pycharm.desktop [Desktop Entry] Name=PyCharm Exec=/opt/pycharm-2021.3.2/bin/pycharm.sh Comment=Programmation python Terminal=false Categories=Development; Icon=/opt/pycharm-2021.3.2/bin/pycharm.svg Type=Application EOT # On charge l'\u00e9l\u00e9ment de menu ainsi cr\u00e9\u00e9 sudo update-desktop-database ~/.local/share/applications Un petit red\u00e9marrage (ou simplement d\u00e9connection/reconnection), PyCharm est maintenant pr\u00eat \u00e0 \u00eatre utilis\u00e9 depuis le menu ! Au premier lancement, vous tomberez sur la page d'activation de Pycharm. Il vous faudra s\u00e9lectionner le mode d'essai ( Start trial ) puis vous connecter sur Jetbrains, par exemple avec vos identifiants Github . Note Si vous n'en avez pas encore cr\u00e9\u00e9 un, rendez-vous sur cette page . Indiquer le nom de codeur\u00b7euse que vous souhaitez.","title":"Installation de Pycharm"},{"location":"djangolxp/style-fiche-inscription/","text":"Affichage de la fiche d'inscription \u00b6 Le pdf de la fiche d'inscription est t\u00e9l\u00e9chargeable \u00e0 l'adresse https://127.0.0.1:8000/pdf/1/xxxxxxx ou 1 est l'id d'une fiche d'inscription, et xxxxx son hash. Vous pourrez soit avoir acc\u00e8s \u00e0 ce couple id/hash \u00e0 la fin de la saisie d'un nouveau formulaire, soit depuis l'interface d'administration : https://127.0.0.1:8000/admin . D'une mani\u00e8re g\u00e9n\u00e9rale une librairie nomm\u00e9e Weasyprint transforme le contenu d'une page web en un fichier PDF. Pour modifier la structure de cette page, il vous faudra donc avoir des bases de html et css. Si ce n'est pas encore le cas, allez voir par . Modification du contenu de la fiche d'inscription \u00b6 Django et les fichiers Template \u00b6 Le fichier mod\u00e8le (template) de la fiche d'inscription (au format html comme pdf) est le suivant : templates/inscription/fiche_inscription.html Globalement, il est constitu\u00e9 de balises html ( <div>,<h1>,<p> ...) auxquelles on associe des classes css (par ex. <span class=\"float-right\"> ) pour mettre en forme le document (voir plus bas pour le css). La valeur d'un champ de notre base est affich\u00e9e avec une expression de type {{ fiche.prenom }} qui correspond aux champs de notre mod\u00e8le BaseEleve. Modifier l'apparence avec le CSS \u00b6 L'affichage de la fiche au format PDF , passe par Weasyprint qui ne permet pas l'utilisation de tout type de CSS (ex pas de Bootstrap utilis\u00e9 ailleurs sur le site, pas de grid...). Il va donc falloir utiliser des classes CSS plus basiques (voir la doc de Weasyprint ). On peut donc utiliser un \u00e9l\u00e9ment de base de HTML, l'\u00e9l\u00e9ment <table> et ses composants pour constituer un tableau . D'autres \u00e9l\u00e9ments de css peuvent nous \u00eatre utiles, comme les coupures du texte , l' alignement du texte . , et plus g\u00e9n\u00e9ralement la mise en forme du texte On peut personnaliser les classes CSS dans le fichier static/css/fiche_inscription.css .","title":"Affichage de la fiche d'inscription"},{"location":"djangolxp/style-fiche-inscription/#affichage-de-la-fiche-dinscription","text":"Le pdf de la fiche d'inscription est t\u00e9l\u00e9chargeable \u00e0 l'adresse https://127.0.0.1:8000/pdf/1/xxxxxxx ou 1 est l'id d'une fiche d'inscription, et xxxxx son hash. Vous pourrez soit avoir acc\u00e8s \u00e0 ce couple id/hash \u00e0 la fin de la saisie d'un nouveau formulaire, soit depuis l'interface d'administration : https://127.0.0.1:8000/admin . D'une mani\u00e8re g\u00e9n\u00e9rale une librairie nomm\u00e9e Weasyprint transforme le contenu d'une page web en un fichier PDF. Pour modifier la structure de cette page, il vous faudra donc avoir des bases de html et css. Si ce n'est pas encore le cas, allez voir par .","title":"Affichage de la fiche d'inscription"},{"location":"djangolxp/style-fiche-inscription/#modification-du-contenu-de-la-fiche-dinscription","text":"","title":"Modification du contenu de la fiche d'inscription"},{"location":"djangolxp/style-fiche-inscription/#django-et-les-fichiers-template","text":"Le fichier mod\u00e8le (template) de la fiche d'inscription (au format html comme pdf) est le suivant : templates/inscription/fiche_inscription.html Globalement, il est constitu\u00e9 de balises html ( <div>,<h1>,<p> ...) auxquelles on associe des classes css (par ex. <span class=\"float-right\"> ) pour mettre en forme le document (voir plus bas pour le css). La valeur d'un champ de notre base est affich\u00e9e avec une expression de type {{ fiche.prenom }} qui correspond aux champs de notre mod\u00e8le BaseEleve.","title":"Django et les fichiers Template"},{"location":"djangolxp/style-fiche-inscription/#modifier-lapparence-avec-le-css","text":"L'affichage de la fiche au format PDF , passe par Weasyprint qui ne permet pas l'utilisation de tout type de CSS (ex pas de Bootstrap utilis\u00e9 ailleurs sur le site, pas de grid...). Il va donc falloir utiliser des classes CSS plus basiques (voir la doc de Weasyprint ). On peut donc utiliser un \u00e9l\u00e9ment de base de HTML, l'\u00e9l\u00e9ment <table> et ses composants pour constituer un tableau . D'autres \u00e9l\u00e9ments de css peuvent nous \u00eatre utiles, comme les coupures du texte , l' alignement du texte . , et plus g\u00e9n\u00e9ralement la mise en forme du texte On peut personnaliser les classes CSS dans le fichier static/css/fiche_inscription.css .","title":"Modifier l'apparence avec le CSS"},{"location":"djangolxp/tableau-filtre/","text":"Affichage des listes d'\u00e9l\u00e8ves \u00b6 Une fois les donn\u00e9es entr\u00e9es dans la base, il nous faut pouvoir les afficher. Dans un premier temps, 2 objectifs sont \u00e0 atteindre : Pouvoir faire des recherches dans la base sur diff\u00e9rents crit\u00e8res (nom, niveau, sp\u00e9...) G\u00e9n\u00e9rer des tableaux que l'on puisse ensuite imprimer sur le m\u00eame type de crit\u00e8res (listes des \u00e9l\u00e8ves par GB, par niveaux, par sp\u00e9...) Voici le d\u00e9tail des fonctions de g\u00e9n\u00e9ration des tableaux, \u00e0 modifier et am\u00e9liorer selon nos besoins. Voir les TODO par la suite. Cr\u00e9er un compte administrateur \u00b6 Evidemment les listes d'\u00e9l\u00e8ves doivent \u00eatre accessibles que par des personnes authoris\u00e9es. Pour cela, si ce n'est pas encore fait, cr\u00e9er un compte administateur de l'application Django : Dans le dossier contenant votre fichier docker-compose.yml, entrer les commandes suivantes : # Lancer l'application docker-compose up -d # Cr\u00e9er votre compte administrateur docker-compose exec web python manage.py createsuperuser Vous deviez maintenant pouvoir vous connecter \u00e0 l'interface d'administration \u00e0 l'adresse suivante : http://localhost:8000/admin URLs des listings \u00b6 Deux URLs sont pour l'instant disponibles pour acc\u00e9der aux listes. Elles sont d\u00e9finies dans le fichier django-lxp/inscription/urls.py https://github.com/Lycee-Experimental/django-lxp/blob/main/inscription/urls.py urlpatterns = [ path ( 'inscriptions' , login_required ( InscriptionRechercheView . as_view ()), name = \"inscriptions\" ), path ( 'inscriptions_table' , login_required ( InscriptionTableView . as_view ()), name = \"inscriptions_table\" ), http://localhost:8000/inscriptions permet de faire des recherches dynamiques http://localhost:8000/inscriptions_table permet de g\u00e9n\u00e9rer les tableaux \u00e0 imprimer. Views des listing \u00b6 Comme tout ce qui s'affiche avec Django, nos 2 vues li\u00e9es aux URLs pr\u00e9c\u00e9dentes sont d\u00e9finies dans le fichier django-lxp/inscription/views.py https://github.com/Lycee-Experimental/django-lxp/blob/main/inscription/views.py class InscriptionRechercheView ( PagedFilteredTableView ): \"\"\" Une view pour afficher un tableau de recherche dans la base. \"\"\" # La classe de filtrage d\u00e9finie dans django-lxp/inscription/filters.py filter_class = ListeEleveFiltre # La base dans laquelle on fait nos recherches model = BaseEleve # Le tableau \u00e0 afficher d\u00e9fini dans django-lxp/inscription/tables.py table_class = ListeEleveTableau # Le template de la page web \u00e0 afficher : django-lxp/template/inscription/recherche_eleves.html template_name = \"inscription/recherche_eleves.html\" # Le formulaire pour effectuer des recherches django-lxp/inscription/forms.py formhelper_class = ListeEleveForm def get_queryset ( self ): # On recherche parmi tou\u00b7t\u00b7es les \u00e9l\u00e8ves return BaseEleve . objects . filter () class InscriptionTableView ( PagedFilteredTableView ): \"\"\" Une view pour afficher un tableau \u00e0 imprimer. On y effectue les recherches directement avec un requette GET ex : http://localhost:8000/inscriptions_table?nom=LeNomRecherch\u00e9 \"\"\" # La classe de filtrage d\u00e9finie dans django-lxp/inscription/filters.py filter_class = ListeEleveFiltre # La base dans laquelle on fait nos recherches model = BaseEleve # Le tableau \u00e0 afficher d\u00e9fini dans django-lxp/inscription/tables.py table_class = ListeEleveTableau # Le template de la page web \u00e0 afficher : django-lxp/template/inscription/filtre_eleves.html template_name = \"inscription/filtre_eleves.html\" formhelper_class = ListeEleveForm def get_queryset ( self ): # On recherche parmi tou\u00b7t\u00b7es les \u00e9l\u00e8ves return BaseEleve . objects . filter () Le filtre de recherche \u00b6 On utilise la librairie django_filters pour nous faciliter la tache. La classe est d\u00e9finie dans le fichier django-lxp/inscription/filters.py Cela permet de lister les \u00e9l\u00e8ves par crit\u00e8res : - Soit gr\u00e2ce au formulaire de recherche (voir apr\u00e8s) sur http://localhost:8000/inscriptions Soit avec des param\u00eatre GET sur http://localhost:8000/inscriptions_table Par exemple : http://localhost:8000/inscriptions_table?gb_annee_en_cours=1 Todo Ajouter d'autres champs \u00e0 filtrer accompagn\u00e9s de leur label (voir leur d\u00e9nomination dans le fichier models.py ). Cr\u00e9er une page interface avec des liens pour g\u00e9n\u00e9rer directement les pages par GB, par niveau, par sp\u00e9... class ListeEleveFiltre ( django_filters . FilterSet ): \"\"\" Classe facilitant le filtrage de la liste d'\u00e9l\u00e8ve. \"\"\" nom = django_filters . CharFilter ( lookup_expr = 'icontains' ) # D\u00e9finit la lookup expression, pour que la recherche fonctionne m\u00eame si le terme n'est pas exact prenom = django_filters . CharFilter ( lookup_expr = 'icontains' ) def __init__ ( self , * args , ** kwargs ): \"\"\"Bidouille pour red\u00e9finir le label des champs du formulaire de recherche.\"\"\" super ( ListeEleveFiltre , self ) . __init__ ( * args , ** kwargs ) self . filters [ 'nom' ] . label = \"Nom\" self . filters [ 'prenom' ] . label = \"Pr\u00e9nom\" self . filters [ 'gb_annee_en_cours' ] . label = \"GB\" class Meta : \"\"\"D\u00e9finition des champs de la base \u00e9l\u00e8ve dans lesquels effectuer la recherche\"\"\" model = BaseEleve fields = [ 'gb_annee_en_cours' , 'nom' , 'prenom' ] order_by = [ \"nom\" ] Formulaire de recherche \u00b6 Comme tout formulaire, on le retrouve dans django-lxp/inscription/forms.py C'est ce fichier qu'il faut modifier pour la mise en forme du formulaire (classes css bootstrap etc.). Comme l'ensemble des formulaires de cette appli, la librairie crispy est utilis\u00e9e. Voir ici pour plus d'info sur la mise en forme. Todo Il faudrait ajouter d'autres champs de recherche et travailler \u00e0 leur mise en forme. class ListeEleveForm ( FormHelper ): \"\"\" Formulaire pour faire des recherches dans le tableau Voir https://django-crispy-forms.readthedocs.io/en/latest/form_helper.html \"\"\" #form_class = \"form-inline\" form_class = \"form-horizontal\" use_custom_control = True form_id = \"inscription-search-form\" form_method = \"GET\" form_tag = True label_class = 'col-md-3' field_class = 'col-md-9' html5_required = True #form_show_labels = False #form_style = 'inline' #field_template = 'bootstrap4/layout/inline_field.html' layout = Layout ( Fieldset ( \"<span class='fa fa-search'></span> \" + str ( _ ( \"Rechercher des \u00e9l\u00e8ves\" )), Div ( \"gb_annee_en_cours\" , \"nom\" , \"prenom\" , css_class = 'row' ), FormActions ( Submit ( \"submit\" , _ ( \"Filtrer\" )), css_class = \"text-right align-self-center\" , ), ) ) Le tableau en lui m\u00eame \u00b6 D\u00e9finit ici : django-lxp/inscription/tables.py https://github.com/Lycee-Experimental/django-lxp/blob/main/inscription/tables.py C'est l\u00e0 qu'on modifie les champs \u00e0 afficher et l'allure du tableau. On utilise pour cela la librairie django_table2 Todo Travailler l'allure du tableau et les champs \u00e0 afficher (niveau, sp\u00e9, tel\u00e9phone, email...). Eventuellement cr\u00e9er d'autres tableaux selon les informations que l'on souhaite afficher (peut-\u00eatre pas les m\u00eame pour les GB, le GN...). class ListeEleveTableau ( tables . Table ): \"\"\"Affiche le tableau de recherche des inscrit.e.s.\"\"\" class Meta : # L'allure du tableau, on utilise celui de bootstrap4 template_name = \"django_tables2/bootstrap4.html\" # Quelques classes css pour sa customisation attrs = { \"class\" : \"table table-striped table-hover\" } # Les donn\u00e9es \u00e0 utiliser model = BaseEleve # Les champs \u00e0 afficher dans le tableau fields = ( \"nom\" , \"prenom\" , \"nom_usage\" ) # Le texte si aucune entr\u00e9es empty_text = _ ( \"Aucun.e \u00e9l\u00e8ve ne correspond aux crit\u00e8res de recherche.\" ) # Le nombre d'entr\u00e9e max par page per_page = 50 Enfin, les templates de nos pages pour mettre tout \u00e7a \u00b6 C'est l\u00e0 qu'on d\u00e9fini la structure des pages qui affichent les tableaux. Todo Faire une belle mise en forme, notamment pour les impressions. django-lxp/template/inscription/filtre_eleves.html Remarque : Le titre de la page doit \u00eatre pass\u00e9 \u00e0 l'url, par exemple : http://localhost:8000/inscriptions_table?titre=Groupe de Base 1&gb_annee_en_cours=1 {% extends 'base.html' %} {% load crispy_forms_tags i18n %} {% load render_table from django_tables2 %} {% block content %} <div class=\"container\"> <h1>{{ titre }}</h1> <hr /> <br /> {% render_table table %} </div> {% endblock content %} django-lxp/template/inscription/recherche_eleves.html Sans titre, avec le formulaire de recherche crispy en plus {% extends 'base.html' %} {% load crispy_forms_tags i18n %} {% load render_table from django_tables2 %} {% block content %} <div class=\"container\"> <h1>Inscriptions au Lyc\u00e9e Exp\u00e9rimental</h1> <hr /> <br /> {% crispy filter.form filter.form.helper %} <br /> {% render_table table %} </div> {% endblock content %}","title":"Afficher/filtrer les listes d'\u00e9l\u00e8ves"},{"location":"djangolxp/tableau-filtre/#affichage-des-listes-deleves","text":"Une fois les donn\u00e9es entr\u00e9es dans la base, il nous faut pouvoir les afficher. Dans un premier temps, 2 objectifs sont \u00e0 atteindre : Pouvoir faire des recherches dans la base sur diff\u00e9rents crit\u00e8res (nom, niveau, sp\u00e9...) G\u00e9n\u00e9rer des tableaux que l'on puisse ensuite imprimer sur le m\u00eame type de crit\u00e8res (listes des \u00e9l\u00e8ves par GB, par niveaux, par sp\u00e9...) Voici le d\u00e9tail des fonctions de g\u00e9n\u00e9ration des tableaux, \u00e0 modifier et am\u00e9liorer selon nos besoins. Voir les TODO par la suite.","title":"Affichage des listes d'\u00e9l\u00e8ves"},{"location":"djangolxp/tableau-filtre/#creer-un-compte-administrateur","text":"Evidemment les listes d'\u00e9l\u00e8ves doivent \u00eatre accessibles que par des personnes authoris\u00e9es. Pour cela, si ce n'est pas encore fait, cr\u00e9er un compte administateur de l'application Django : Dans le dossier contenant votre fichier docker-compose.yml, entrer les commandes suivantes : # Lancer l'application docker-compose up -d # Cr\u00e9er votre compte administrateur docker-compose exec web python manage.py createsuperuser Vous deviez maintenant pouvoir vous connecter \u00e0 l'interface d'administration \u00e0 l'adresse suivante : http://localhost:8000/admin","title":"Cr\u00e9er un compte administrateur"},{"location":"djangolxp/tableau-filtre/#urls-des-listings","text":"Deux URLs sont pour l'instant disponibles pour acc\u00e9der aux listes. Elles sont d\u00e9finies dans le fichier django-lxp/inscription/urls.py https://github.com/Lycee-Experimental/django-lxp/blob/main/inscription/urls.py urlpatterns = [ path ( 'inscriptions' , login_required ( InscriptionRechercheView . as_view ()), name = \"inscriptions\" ), path ( 'inscriptions_table' , login_required ( InscriptionTableView . as_view ()), name = \"inscriptions_table\" ), http://localhost:8000/inscriptions permet de faire des recherches dynamiques http://localhost:8000/inscriptions_table permet de g\u00e9n\u00e9rer les tableaux \u00e0 imprimer.","title":"URLs des listings"},{"location":"djangolxp/tableau-filtre/#views-des-listing","text":"Comme tout ce qui s'affiche avec Django, nos 2 vues li\u00e9es aux URLs pr\u00e9c\u00e9dentes sont d\u00e9finies dans le fichier django-lxp/inscription/views.py https://github.com/Lycee-Experimental/django-lxp/blob/main/inscription/views.py class InscriptionRechercheView ( PagedFilteredTableView ): \"\"\" Une view pour afficher un tableau de recherche dans la base. \"\"\" # La classe de filtrage d\u00e9finie dans django-lxp/inscription/filters.py filter_class = ListeEleveFiltre # La base dans laquelle on fait nos recherches model = BaseEleve # Le tableau \u00e0 afficher d\u00e9fini dans django-lxp/inscription/tables.py table_class = ListeEleveTableau # Le template de la page web \u00e0 afficher : django-lxp/template/inscription/recherche_eleves.html template_name = \"inscription/recherche_eleves.html\" # Le formulaire pour effectuer des recherches django-lxp/inscription/forms.py formhelper_class = ListeEleveForm def get_queryset ( self ): # On recherche parmi tou\u00b7t\u00b7es les \u00e9l\u00e8ves return BaseEleve . objects . filter () class InscriptionTableView ( PagedFilteredTableView ): \"\"\" Une view pour afficher un tableau \u00e0 imprimer. On y effectue les recherches directement avec un requette GET ex : http://localhost:8000/inscriptions_table?nom=LeNomRecherch\u00e9 \"\"\" # La classe de filtrage d\u00e9finie dans django-lxp/inscription/filters.py filter_class = ListeEleveFiltre # La base dans laquelle on fait nos recherches model = BaseEleve # Le tableau \u00e0 afficher d\u00e9fini dans django-lxp/inscription/tables.py table_class = ListeEleveTableau # Le template de la page web \u00e0 afficher : django-lxp/template/inscription/filtre_eleves.html template_name = \"inscription/filtre_eleves.html\" formhelper_class = ListeEleveForm def get_queryset ( self ): # On recherche parmi tou\u00b7t\u00b7es les \u00e9l\u00e8ves return BaseEleve . objects . filter ()","title":"Views des listing"},{"location":"djangolxp/tableau-filtre/#le-filtre-de-recherche","text":"On utilise la librairie django_filters pour nous faciliter la tache. La classe est d\u00e9finie dans le fichier django-lxp/inscription/filters.py Cela permet de lister les \u00e9l\u00e8ves par crit\u00e8res : - Soit gr\u00e2ce au formulaire de recherche (voir apr\u00e8s) sur http://localhost:8000/inscriptions Soit avec des param\u00eatre GET sur http://localhost:8000/inscriptions_table Par exemple : http://localhost:8000/inscriptions_table?gb_annee_en_cours=1 Todo Ajouter d'autres champs \u00e0 filtrer accompagn\u00e9s de leur label (voir leur d\u00e9nomination dans le fichier models.py ). Cr\u00e9er une page interface avec des liens pour g\u00e9n\u00e9rer directement les pages par GB, par niveau, par sp\u00e9... class ListeEleveFiltre ( django_filters . FilterSet ): \"\"\" Classe facilitant le filtrage de la liste d'\u00e9l\u00e8ve. \"\"\" nom = django_filters . CharFilter ( lookup_expr = 'icontains' ) # D\u00e9finit la lookup expression, pour que la recherche fonctionne m\u00eame si le terme n'est pas exact prenom = django_filters . CharFilter ( lookup_expr = 'icontains' ) def __init__ ( self , * args , ** kwargs ): \"\"\"Bidouille pour red\u00e9finir le label des champs du formulaire de recherche.\"\"\" super ( ListeEleveFiltre , self ) . __init__ ( * args , ** kwargs ) self . filters [ 'nom' ] . label = \"Nom\" self . filters [ 'prenom' ] . label = \"Pr\u00e9nom\" self . filters [ 'gb_annee_en_cours' ] . label = \"GB\" class Meta : \"\"\"D\u00e9finition des champs de la base \u00e9l\u00e8ve dans lesquels effectuer la recherche\"\"\" model = BaseEleve fields = [ 'gb_annee_en_cours' , 'nom' , 'prenom' ] order_by = [ \"nom\" ]","title":"Le filtre de recherche"},{"location":"djangolxp/tableau-filtre/#formulaire-de-recherche","text":"Comme tout formulaire, on le retrouve dans django-lxp/inscription/forms.py C'est ce fichier qu'il faut modifier pour la mise en forme du formulaire (classes css bootstrap etc.). Comme l'ensemble des formulaires de cette appli, la librairie crispy est utilis\u00e9e. Voir ici pour plus d'info sur la mise en forme. Todo Il faudrait ajouter d'autres champs de recherche et travailler \u00e0 leur mise en forme. class ListeEleveForm ( FormHelper ): \"\"\" Formulaire pour faire des recherches dans le tableau Voir https://django-crispy-forms.readthedocs.io/en/latest/form_helper.html \"\"\" #form_class = \"form-inline\" form_class = \"form-horizontal\" use_custom_control = True form_id = \"inscription-search-form\" form_method = \"GET\" form_tag = True label_class = 'col-md-3' field_class = 'col-md-9' html5_required = True #form_show_labels = False #form_style = 'inline' #field_template = 'bootstrap4/layout/inline_field.html' layout = Layout ( Fieldset ( \"<span class='fa fa-search'></span> \" + str ( _ ( \"Rechercher des \u00e9l\u00e8ves\" )), Div ( \"gb_annee_en_cours\" , \"nom\" , \"prenom\" , css_class = 'row' ), FormActions ( Submit ( \"submit\" , _ ( \"Filtrer\" )), css_class = \"text-right align-self-center\" , ), ) )","title":"Formulaire de recherche"},{"location":"djangolxp/tableau-filtre/#le-tableau-en-lui-meme","text":"D\u00e9finit ici : django-lxp/inscription/tables.py https://github.com/Lycee-Experimental/django-lxp/blob/main/inscription/tables.py C'est l\u00e0 qu'on modifie les champs \u00e0 afficher et l'allure du tableau. On utilise pour cela la librairie django_table2 Todo Travailler l'allure du tableau et les champs \u00e0 afficher (niveau, sp\u00e9, tel\u00e9phone, email...). Eventuellement cr\u00e9er d'autres tableaux selon les informations que l'on souhaite afficher (peut-\u00eatre pas les m\u00eame pour les GB, le GN...). class ListeEleveTableau ( tables . Table ): \"\"\"Affiche le tableau de recherche des inscrit.e.s.\"\"\" class Meta : # L'allure du tableau, on utilise celui de bootstrap4 template_name = \"django_tables2/bootstrap4.html\" # Quelques classes css pour sa customisation attrs = { \"class\" : \"table table-striped table-hover\" } # Les donn\u00e9es \u00e0 utiliser model = BaseEleve # Les champs \u00e0 afficher dans le tableau fields = ( \"nom\" , \"prenom\" , \"nom_usage\" ) # Le texte si aucune entr\u00e9es empty_text = _ ( \"Aucun.e \u00e9l\u00e8ve ne correspond aux crit\u00e8res de recherche.\" ) # Le nombre d'entr\u00e9e max par page per_page = 50","title":"Le tableau en lui m\u00eame"},{"location":"djangolxp/tableau-filtre/#enfin-les-templates-de-nos-pages-pour-mettre-tout-ca","text":"C'est l\u00e0 qu'on d\u00e9fini la structure des pages qui affichent les tableaux. Todo Faire une belle mise en forme, notamment pour les impressions. django-lxp/template/inscription/filtre_eleves.html Remarque : Le titre de la page doit \u00eatre pass\u00e9 \u00e0 l'url, par exemple : http://localhost:8000/inscriptions_table?titre=Groupe de Base 1&gb_annee_en_cours=1 {% extends 'base.html' %} {% load crispy_forms_tags i18n %} {% load render_table from django_tables2 %} {% block content %} <div class=\"container\"> <h1>{{ titre }}</h1> <hr /> <br /> {% render_table table %} </div> {% endblock content %} django-lxp/template/inscription/recherche_eleves.html Sans titre, avec le formulaire de recherche crispy en plus {% extends 'base.html' %} {% load crispy_forms_tags i18n %} {% load render_table from django_tables2 %} {% block content %} <div class=\"container\"> <h1>Inscriptions au Lyc\u00e9e Exp\u00e9rimental</h1> <hr /> <br /> {% crispy filter.form filter.form.helper %} <br /> {% render_table table %} </div> {% endblock content %}","title":"Enfin, les templates de nos pages pour mettre tout \u00e7a"},{"location":"git/commandes/","text":"Commandes de base \u00b6 Les commandes permettent de g\u00e9rer le flot de donn\u00e9es et les niveaux d'enregistrement dans le syst\u00e8me de contr\u00f4le de r\u00e9vision de Git, par exemple, le checkout et le pull permettent de r\u00e9cup\u00e9rer les donn\u00e9es; le commit de les envoyer. Git dispose notamment des commandes suivantes : git init cr\u00e9e un nouveau d\u00e9p\u00f4t git clone clone un d\u00e9p\u00f4t distant git add ajoute de nouveaux objets blobs dans la base des objets pour chaque fichier modifi\u00e9 depuis le dernier commit. Les objets pr\u00e9c\u00e9dents restent inchang\u00e9s ; git commit int\u00e8gre la somme de contr\u00f4le SHA-1 d'un objet tree et les sommes de contr\u00f4le des objets commits parents pour cr\u00e9er un nouvel objet commit ; git branch liste les branches ; git merge fusionne une branche dans une autre ; git rebase d\u00e9place les commits de la branche courante devant les nouveaux commits d\u2019une autre branche ; git log affiche la liste des commits effectu\u00e9s sur une branche ; git push publie les nouvelles r\u00e9visions sur le remote. (La commande prend diff\u00e9rents param\u00e8tres) ; git pull r\u00e9cup\u00e8re les derni\u00e8res modifications distantes du projet (depuis le Remote) et les fusionne dans la branche courante ; git stash stocke de c\u00f4t\u00e9 un \u00e9tat non commit\u00e9 afin d\u2019effectuer d\u2019autres t\u00e2ches ; git checkout annule les modifications effectu\u00e9es, d\u00e9placement sur une r\u00e9f\u00e9rence (branche, hash) ; git switch changement de branche ; git remote gestion des remotes.","title":"Commandes"},{"location":"git/commandes/#commandes-de-base","text":"Les commandes permettent de g\u00e9rer le flot de donn\u00e9es et les niveaux d'enregistrement dans le syst\u00e8me de contr\u00f4le de r\u00e9vision de Git, par exemple, le checkout et le pull permettent de r\u00e9cup\u00e9rer les donn\u00e9es; le commit de les envoyer. Git dispose notamment des commandes suivantes : git init cr\u00e9e un nouveau d\u00e9p\u00f4t git clone clone un d\u00e9p\u00f4t distant git add ajoute de nouveaux objets blobs dans la base des objets pour chaque fichier modifi\u00e9 depuis le dernier commit. Les objets pr\u00e9c\u00e9dents restent inchang\u00e9s ; git commit int\u00e8gre la somme de contr\u00f4le SHA-1 d'un objet tree et les sommes de contr\u00f4le des objets commits parents pour cr\u00e9er un nouvel objet commit ; git branch liste les branches ; git merge fusionne une branche dans une autre ; git rebase d\u00e9place les commits de la branche courante devant les nouveaux commits d\u2019une autre branche ; git log affiche la liste des commits effectu\u00e9s sur une branche ; git push publie les nouvelles r\u00e9visions sur le remote. (La commande prend diff\u00e9rents param\u00e8tres) ; git pull r\u00e9cup\u00e8re les derni\u00e8res modifications distantes du projet (depuis le Remote) et les fusionne dans la branche courante ; git stash stocke de c\u00f4t\u00e9 un \u00e9tat non commit\u00e9 afin d\u2019effectuer d\u2019autres t\u00e2ches ; git checkout annule les modifications effectu\u00e9es, d\u00e9placement sur une r\u00e9f\u00e9rence (branche, hash) ; git switch changement de branche ; git remote gestion des remotes.","title":"Commandes de base"},{"location":"git/presentation/","text":"Introduction \u00b6 Pr\u00e9sentation \u00b6 Git est un logiciel de gestion de versions d\u00e9centralis\u00e9 (ou DVCS en anglais, pour Distributed Version Control System). Un VCS permet de stocker un ensemble de fichiers en conservant la chronologie de toutes les modifications qui ont \u00e9t\u00e9 effectu\u00e9es dessus. Il permet ainsi de retrouver les diff\u00e9rentes versions d'un projet. Fini les embrouilles d'un dossier rempli de fichiers du type : mondoc-v1.odt, mondoc-v1modifi\u00e9.odt, mondoc-finalv1.odt, mondoc-final.odt... Pour info il existe d'autres VCS : SVN ou CVS (centralis\u00e9), Mercurial (d\u00e9centralis\u00e9). Historique \u00b6 Git un logiciel libre cr\u00e9\u00e9 en 2005 par Linus Torvalds pour d\u00e9velopper le noyau Linux (cr\u00e9\u00e9 en 1991). Pour la petite histoire, le magazine PC World nous apprend que quand on lui a demand\u00e9 pourquoi il avait appel\u00e9 son logiciel git , qui est \u00e0 peu pr\u00e8s l\u2019\u00e9quivalent de \u201cconnard\u201d en argot britannique, Linus Torvalds a r\u00e9pondu : Je ne suis qu'un sale \u00e9gocentrique, donc j'appelle tous mes projets d'apr\u00e8s ma propre personne. D\u2019abord Linux, puis Git. Git est depuis devenu le VCS le plus utilis\u00e9 par les d\u00e9veloppeur\u00b7euses, que ce soit avec Github, Gitlab, Bitbucket ou d'autres services en ligne. Fonctionnement \u00b6 Ce livre tr\u00e8s complet vous permettra d'en savoir plus sur le fonctionnement de Git. Diagramme de fonctionnement \u00b6","title":"Pr\u00e9sentation"},{"location":"git/presentation/#introduction","text":"","title":"Introduction"},{"location":"git/presentation/#presentation","text":"Git est un logiciel de gestion de versions d\u00e9centralis\u00e9 (ou DVCS en anglais, pour Distributed Version Control System). Un VCS permet de stocker un ensemble de fichiers en conservant la chronologie de toutes les modifications qui ont \u00e9t\u00e9 effectu\u00e9es dessus. Il permet ainsi de retrouver les diff\u00e9rentes versions d'un projet. Fini les embrouilles d'un dossier rempli de fichiers du type : mondoc-v1.odt, mondoc-v1modifi\u00e9.odt, mondoc-finalv1.odt, mondoc-final.odt... Pour info il existe d'autres VCS : SVN ou CVS (centralis\u00e9), Mercurial (d\u00e9centralis\u00e9).","title":"Pr\u00e9sentation"},{"location":"git/presentation/#historique","text":"Git un logiciel libre cr\u00e9\u00e9 en 2005 par Linus Torvalds pour d\u00e9velopper le noyau Linux (cr\u00e9\u00e9 en 1991). Pour la petite histoire, le magazine PC World nous apprend que quand on lui a demand\u00e9 pourquoi il avait appel\u00e9 son logiciel git , qui est \u00e0 peu pr\u00e8s l\u2019\u00e9quivalent de \u201cconnard\u201d en argot britannique, Linus Torvalds a r\u00e9pondu : Je ne suis qu'un sale \u00e9gocentrique, donc j'appelle tous mes projets d'apr\u00e8s ma propre personne. D\u2019abord Linux, puis Git. Git est depuis devenu le VCS le plus utilis\u00e9 par les d\u00e9veloppeur\u00b7euses, que ce soit avec Github, Gitlab, Bitbucket ou d'autres services en ligne.","title":"Historique"},{"location":"git/presentation/#fonctionnement","text":"Ce livre tr\u00e8s complet vous permettra d'en savoir plus sur le fonctionnement de Git.","title":"Fonctionnement"},{"location":"git/presentation/#diagramme-de-fonctionnement","text":"","title":"Diagramme de fonctionnement"},{"location":"git/utilisation/","text":"Utilisation \u00b6 Installation \u00b6 Avec linux, rien de plus simple : sudo apt install git-all Renseigner son identit\u00e9 \u00b6 git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com Attention ! Attention, votre email doit \u00eatre le m\u00eame que celui de votre compte Github ! Cloner un d\u00e9pot existant sur Github \u00b6 Commencez par vous rendre dans le dossier ou vous souhaitez importer le projet : cd ~/Documents/mes_projets_de_progra La commande git clone permet ensuite d'importer le contenu d'un projet h\u00e9berg\u00e9 sur Github (ou autre) : git clone https://github.com/lycee-experimental/django-lxp Le contenu du dossier ainsi que l'int\u00e9gralit\u00e9 de l'historique des versions sera ainsi import\u00e9 dans le dossier ~/Documents/mes_projets_de_progra/django-lxp Vous pouvez aussi faire directement : git clone https://github.com/lycee-experimental/django-lxp ~/Documents/mes_projets_de_progra/django-lxp","title":"Utilisation"},{"location":"git/utilisation/#utilisation","text":"","title":"Utilisation"},{"location":"git/utilisation/#installation","text":"Avec linux, rien de plus simple : sudo apt install git-all","title":"Installation"},{"location":"git/utilisation/#renseigner-son-identite","text":"git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com Attention ! Attention, votre email doit \u00eatre le m\u00eame que celui de votre compte Github !","title":"Renseigner son identit\u00e9"},{"location":"git/utilisation/#cloner-un-depot-existant-sur-github","text":"Commencez par vous rendre dans le dossier ou vous souhaitez importer le projet : cd ~/Documents/mes_projets_de_progra La commande git clone permet ensuite d'importer le contenu d'un projet h\u00e9berg\u00e9 sur Github (ou autre) : git clone https://github.com/lycee-experimental/django-lxp Le contenu du dossier ainsi que l'int\u00e9gralit\u00e9 de l'historique des versions sera ainsi import\u00e9 dans le dossier ~/Documents/mes_projets_de_progra/django-lxp Vous pouvez aussi faire directement : git clone https://github.com/lycee-experimental/django-lxp ~/Documents/mes_projets_de_progra/django-lxp","title":"Cloner un d\u00e9pot existant sur Github"},{"location":"renpy/decompile/","text":"Ren'Py est un moteur en python permettant de cr\u00e9er facilement des Visual Novels . De nombreux jeux r\u00e9alis\u00e9s avec Ren'Py sont disponibles gratuitement, mais le code source de ces jeux n'est pas souvent accessible. Une multitude de jeux gratuits est accessible sur Itch , Visual Novel DataBase ou sur Steam . Ainsi pour apprendre \u00e0 utiliser Ren'Py, il peut s'av\u00e9rer utile de d\u00e9compiler les jeux existants pour pouvoir en \u00e9tudier les scripts. La proc\u00e9dure suivante permet cela : D\u00e9compilation automatique \u00b6 Ouvrir un terminal dans le dossier game de votre jeu et t\u00e9l\u00e9charger la derni\u00e8re version de un.rpyc : wget https://github.com/CensoredUsername/unrpyc/releases/download/v1.1.7/un.rpyc Simplement lancer le jeu (fichier .py ou .sh \u00e0 la racine), le quitter, tous les .rpyc des sous-dossiers game devraient avoir \u00e9t\u00e9 d\u00e9compli\u00e9s en .rpy . Vous pouvez alors supprimer le fichier scripts.rpa et effectuer d'\u00e9ventuelles modifications dans les fichiers .rpy qui sont apparus : gui.rpy , options.rpy , screens.rpy , script.rpy . Pour avoir \u00e9galement acc\u00e8s aux images et sons, continuer la proc\u00e9dure suivante. D\u00e9compilation manuelle \u00b6 D\u00e9paqueter les fichiers .rpa \u00b6 Les jeux sont empaquet\u00e9s dans des fichiers d'extension .rpa , notamment les images et sons en plus des scripts. Il faut donc \u00e9galement les d\u00e9compacter. Installation de unrpa \u00b6 sudo apt install python3-pip sudo pip3 install unrpa Utilisation \u00b6 Pour extraire et supprimer tous les rpa du dossier : cd path/to/my/game unrpa *.rpa rm *.rpa D\u00e9compiler les .rpyc \u00b6 Dans les paquets rpa ainsi extraits se trouvent les fichiers compil\u00e9s du jeu au format .rpyc Installation de unrpyc \u00b6 sudo apt install python2 curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py sudo python2 get-pip.py cd ~/T\u00e9l\u00e9chargements git clone https://github.com/CensoredUsername/unrpyc cd unrpyc sudo python2 setup.py install Utilisation \u00b6 Pour d\u00e9compiler tous les .rpyc du dossier et sous-dossiers : cd path/to/my/game unrpyc.py .","title":"D\u00e9compiler un jeu"},{"location":"renpy/decompile/#decompilation-automatique","text":"Ouvrir un terminal dans le dossier game de votre jeu et t\u00e9l\u00e9charger la derni\u00e8re version de un.rpyc : wget https://github.com/CensoredUsername/unrpyc/releases/download/v1.1.7/un.rpyc Simplement lancer le jeu (fichier .py ou .sh \u00e0 la racine), le quitter, tous les .rpyc des sous-dossiers game devraient avoir \u00e9t\u00e9 d\u00e9compli\u00e9s en .rpy . Vous pouvez alors supprimer le fichier scripts.rpa et effectuer d'\u00e9ventuelles modifications dans les fichiers .rpy qui sont apparus : gui.rpy , options.rpy , screens.rpy , script.rpy . Pour avoir \u00e9galement acc\u00e8s aux images et sons, continuer la proc\u00e9dure suivante.","title":"D\u00e9compilation automatique"},{"location":"renpy/decompile/#decompilation-manuelle","text":"","title":"D\u00e9compilation manuelle"},{"location":"renpy/decompile/#depaqueter-les-fichiers-rpa","text":"Les jeux sont empaquet\u00e9s dans des fichiers d'extension .rpa , notamment les images et sons en plus des scripts. Il faut donc \u00e9galement les d\u00e9compacter.","title":"D\u00e9paqueter les fichiers .rpa"},{"location":"renpy/decompile/#installation-de-unrpa","text":"sudo apt install python3-pip sudo pip3 install unrpa","title":"Installation de unrpa"},{"location":"renpy/decompile/#utilisation","text":"Pour extraire et supprimer tous les rpa du dossier : cd path/to/my/game unrpa *.rpa rm *.rpa","title":"Utilisation"},{"location":"renpy/decompile/#decompiler-les-rpyc","text":"Dans les paquets rpa ainsi extraits se trouvent les fichiers compil\u00e9s du jeu au format .rpyc","title":"D\u00e9compiler les .rpyc"},{"location":"renpy/decompile/#installation-de-unrpyc","text":"sudo apt install python2 curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py sudo python2 get-pip.py cd ~/T\u00e9l\u00e9chargements git clone https://github.com/CensoredUsername/unrpyc cd unrpyc sudo python2 setup.py install","title":"Installation de unrpyc"},{"location":"renpy/decompile/#utilisation_1","text":"Pour d\u00e9compiler tous les .rpyc du dossier et sous-dossiers : cd path/to/my/game unrpyc.py .","title":"Utilisation"}]}